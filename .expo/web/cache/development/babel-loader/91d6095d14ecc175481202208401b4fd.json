{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ToggleButtonGroup from \"./ToggleButtonGroup\";\nimport ToggleButton from \"./ToggleButton\";\n\nvar ToggleButtonRow = function ToggleButtonRow(_ref) {\n  var value = _ref.value,\n      onValueChange = _ref.onValueChange,\n      children = _ref.children,\n      style = _ref.style;\n  var count = React.Children.count(children);\n  return React.createElement(ToggleButtonGroup, {\n    value: value,\n    onValueChange: onValueChange\n  }, React.createElement(View, {\n    style: [styles.row, style]\n  }, React.Children.map(children, function (child, i) {\n    if (child && child.type === ToggleButton) {\n      return React.cloneElement(child, {\n        style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]\n      });\n    }\n\n    return child;\n  })));\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonRow;\nexport { ToggleButtonRow };","map":{"version":3,"names":["React","ToggleButtonGroup","ToggleButton","ToggleButtonRow","_ref","value","onValueChange","children","style","count","Children","createElement","View","styles","row","map","child","i","type","cloneElement","button","first","last","middle","props","displayName","StyleSheet","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"sources":["/Users/rofhiwa/Desktop/react-native-auth/restuarant/node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButtonRow.js"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButton from './ToggleButton';\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = _ref => {\n  let {\n    value,\n    onValueChange,\n    children,\n    style\n  } = _ref;\n  const count = React.Children.count(children);\n  return /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    value: value,\n    onValueChange: onValueChange\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.row, style]\n  }, React.Children.map(children, (child, i) => {\n    // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n    if (child && child.type === ToggleButton) {\n      // @ts-expect-error: We're sure that child is a React Element\n      return /*#__PURE__*/React.cloneElement(child, {\n        style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, // @ts-expect-error: We're sure that child is a React Element\n        child.props.style]\n      });\n    }\n\n    return child;\n  })));\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonRow; // @component-docs ignore-next-line\n\nexport { ToggleButtonRow };\n//# sourceMappingURL=ToggleButtonRow.js.map"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,iBAAP;AACA,OAAOC,YAAP;;AA+BA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,IAAI,EAAI;EAC9B,IACEC,KADF,GAKID,IALJ,CACEC,KADF;EAAA,IAEEC,aAFF,GAKIF,IALJ,CAEEE,aAFF;EAAA,IAGEC,QAHF,GAKIH,IALJ,CAGEG,QAHF;EAAA,IAIEC,KAJF,GAKIJ,IALJ,CAIEI,KAJF;EAMA,IAAMC,KAAK,GAAGT,KAAK,CAACU,QAAN,CAAeD,KAAf,CAAqBF,QAArB,CAAd;EACA,OAAoBP,KAAK,CAACW,aAAN,CAAoBV,iBAApB,EAAuC;IACzDI,KAAK,EAAEA,KADkD;IAEzDC,aAAa,EAAEA;EAF0C,CAAvC,EAGJN,KAAK,CAACW,aAAN,CAAoBC,IAApB,EAA0B;IACxCJ,KAAK,EAAE,CAACK,MAAM,CAACC,GAAR,EAAaN,KAAb;EADiC,CAA1B,EAEbR,KAAK,CAACU,QAAN,CAAeK,GAAf,CAAmBR,QAAnB,EAA6B,UAACS,KAAD,EAAQC,CAAR,EAAc;IAE5C,IAAID,KAAK,IAAIA,KAAK,CAACE,IAAN,KAAehB,YAA5B,EAA0C;MAExC,OAAoBF,KAAK,CAACmB,YAAN,CAAmBH,KAAnB,EAA0B;QAC5CR,KAAK,EAAE,CAACK,MAAM,CAACO,MAAR,EAAgBH,CAAC,KAAK,CAAN,GAAUJ,MAAM,CAACQ,KAAjB,GAAyBJ,CAAC,KAAKR,KAAK,GAAG,CAAd,GAAkBI,MAAM,CAACS,IAAzB,GAAgCT,MAAM,CAACU,MAAhF,EACPP,KAAK,CAACQ,KAAN,CAAYhB,KADL;MADqC,CAA1B,CAApB;IAID;;IAED,OAAOQ,KAAP;EACD,CAXE,CAFa,CAHI,CAApB;AAiBD,CAzBD;;AA2BAb,eAAe,CAACsB,WAAhB,GAA8B,kBAA9B;AACA,IAAMZ,MAAM,GAAGa,UAAU,CAACC,MAAX,CAAkB;EAC/Bb,GAAG,EAAE;IACHc,aAAa,EAAE;EADZ,CAD0B;EAI/BR,MAAM,EAAE;IACNS,WAAW,EAAEH,UAAU,CAACI;EADlB,CAJuB;EAO/BT,KAAK,EAAE;IACLU,oBAAoB,EAAE,CADjB;IAELC,uBAAuB,EAAE;EAFpB,CAPwB;EAW/BT,MAAM,EAAE;IACNU,YAAY,EAAE,CADR;IAENC,eAAe,EAAE;EAFX,CAXuB;EAe/BZ,IAAI,EAAE;IACJY,eAAe,EAAE,CADb;IAEJC,mBAAmB,EAAE,CAFjB;IAGJC,sBAAsB,EAAE;EAHpB;AAfyB,CAAlB,CAAf;AAqBA,eAAejC,eAAf;AAEA,SAASA,eAAT"},"metadata":{},"sourceType":"module"}